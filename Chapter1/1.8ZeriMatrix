//nullifyRow
//nullifyColumn
public void zeromatrix(int[][] input){
  int n=input.length;
  int m = input[0].length;
  boolean[] rcheck= new boolean[n];
  boolean[] ccheck= new boolean[m];
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      if (input[i][j]==0){
        rcheck[i]=true;
        ccheck[j]=true;
        break;
      }
    }
  }
  for(int i=0;i<n;i++){
    if(rcheck[i]){
      for(int j=0;j<m;j++){
        input[i][j]==0;
      }
    }
  }
  for(int i=0;i<m;i++){
    if(ccheck[i]){
      for(int j=0;j<n;j++){
        input[j][i]==0;
      }
    }
  }  
}
//solution:
1 void setZeros(int[][] matrix) {
2   boolean[] row = new boolean[matrix .length];
3   boolean[] column = new boolean[matrix[0].length];
4
5 //   Store the row and column index with value 0
6   for (int i= 0; i < matrix.length; i++) {
7     for (int j = 0; j < matrix[0].length;j++) {
8       if (matrix[i][j] == 0) {
9         row[i] = true;
10        column[j] = true;
11      }
12    }
13  }
15 // Nullify rows
16  for (inti= 0; i < row.length; i++) {
17    if (row[i]) nullifyRow(matrix, i);
18   }
19
20    // Nullify columns
21  for (int j = 0; j < column.length; j++) {
22    if (column[j]) nullifyColumn(matrix, j);
23  }
24 }
25
26 void nullifyRow(int[][] matrix, int row) {
27  for (int j = 0; j < matrix[0].length; j++) {
28    matrix[row][j] = 0;
29  }
30 }
31
32 void nullifyColumn(int[][] matrix, int col) {
33  for (int i= 0; i < matrix.length; i++) {
34    matrix[i][col] = 0;
35  }
36 }
////solution
void setzeros(int[][] matrix) {
  boolean rowHasZero = false;
  boolean colHasZero = false;
  // Check if first row has a zero
  for (int j = 0; j < matrix[0].length; j++) {
    if (matrix[0][j] == 0) {
      rowHasZero = true;
      break;
    }
  }
  // Check if first column has a zero
  for (int i = 0; i < matrix.length; i++) {
    if (matrix[i][0] == 0) {
      colHasZero = true;
      break; 
    }
  }
  // Check for zeros in the rest of the array
  for (int i= 1; i < matrix.length; i++) {
    for (int j = 1; j < matrix[0].length;j++) {
      if (matrix[iJ[jJ == 0) {
        matrix[i][0] = 0;
        matrix[0J[j] = 0;
      }
    }
  }
  // Nullify rows based on values in first column
  for (int i= 1; i < matrix.length; i++) {
    if (matrix[i][0] == 0) {
      nullifyRow(matrix, i);
    }
  }
    // Nullify columns based on values in first row
  for (int j = 1; j < matrix[0].length; j++) {
    if (matrix[0][j] == 0) {
      nullifyColumn(matrix, j);
    }
  }
  // Nullify first row
  if (rowHasZero) {
    nullifyRow(matrix, 0);
  }
  // Nullify first column
  if (colHasZero) {
    nullifyColumn(matrix, 0);
  } 
}
